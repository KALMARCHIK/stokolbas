from django.contrib import admin
from products.models import Supplier, Product, Category, Regions
from django.db import transaction


class ProductAdmin(admin.ModelAdmin):
    list_display = ('slug', 'supplier', 'name', 'category', 'is_new', 'implementation_period', 'weight_unit', 'price', 'bulk_price', 'image')  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ —Å–ø–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–æ–≤
    list_filter = ('name', 'category', 'supplier')
    actions = ['parse_selected_product_image', 'update_product_new_status']

    # def update_product_new_status(self, request, queryset):
    #     print([i.category for i in queryset])
        
    #     product_to_process = []

    #     for product in queryset:
    #         if not product.image:
    #             product_to_process.append((product.name, product.category, product))
        
    #     from parsers.site_parser import parse_new_status
    #     for product_name, product_category, product in product_to_process:
    #         parse_new_status(product_name, product_category, product)

    #     print(product_to_process)
    #     self.message_user(request, "–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –Ω–æ–≤–∏–Ω–æ–∫!")

    def parse_selected_product_image(self, request, queryset):
        print([i.supplier for i in queryset])
        kalinko = []
        berez = []
        pinski = []
        borisovski = []

        from parsers.kalinko_parser import kalinko_parser
        from parsers.bereza_parser import bereza_parser
        for i in queryset:
            if i.supplier == '–ë–µ—Ä–µ–∑–æ–≤—Å–∫–∏–π –º—è—Å–æ–∫–æ–Ω—Å–µ—Ä–≤–Ω—ã–π –∫–æ–º–±–∏–Ω–∞—Ç':
                berez.append(i)
            elif i.supplier == '–ü–∏–Ω—Å–∫–∏–π –º—è—Å–æ–∫–æ–º–±–∏–Ω–∞—Ç':
                pinski.append(i)
            elif i.supplier == '–ö–∞–ª–∏–Ω–∫–æ–≤–∏—á—Å–∫–∏–π –º—è—Å–æ–∫–æ–º–±–∏–Ω–∞—Ç':
                kalinko.append(i)
            elif i.supplier == '–ë–æ—Ä–∏—Å–æ–≤—Å–∫–∏–π –º—è—Å–æ–∫–æ–Ω—Å–µ—Ä–≤–Ω—ã–π –∫–æ–º–±–∏–Ω–∞—Ç':
                borisovski.append(i)
        
        kalinko_parser(kalinko)
        bereza_parser(berez)


        self.message_user(request, "–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!")
    # update_product_new_status.short_description = "–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–æ–≤–∏–Ω–æ–∫"
    parse_selected_product_image.short_description = "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

admin.site.register(Product, ProductAdmin)


class CategoryAdmin(admin.ModelAdmin):
    list_display = ('name', 'supplier','slug')
    list_filter = ('name', 'supplier')

admin.site.register(Category, CategoryAdmin)


class SupplierAdmin(admin.ModelAdmin):
    list_display = ('name', 'website', 'price_list', 'slug')
    # list_filter = ('category', 'price')
    actions = ["parse_selected_price_lists"]

    def parse_selected_price_lists(self, request, queryset):
        """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""

        suppliers_to_process = []

        # üîπ 1. –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
        for supplier in queryset:
            if supplier.price_list:
                suppliers_to_process.append((supplier.price_list.path, supplier))

        # üîπ 2. –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        def process_files():
            from parsers.excel_parser import parse_price_list
            for file_path, supplier_name in suppliers_to_process:
                parse_price_list(file_path, supplier_name)  # –ü—Ä–æ–±—Ä–æ—Å –∏–º–µ–Ω–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞

        transaction.on_commit(process_files)  # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
        self.message_user(request, "–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç—ã –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö!")

    parse_selected_price_lists.short_description = "–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç—ã"

admin.site.register(Supplier, SupplierAdmin)


class RegionAdmin(admin.ModelAdmin):
    list_display = ('name', 'description', 'slug')

admin.site.register(Regions, RegionAdmin)
